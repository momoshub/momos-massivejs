'use strict';

/** @module where */

const _ = require('lodash');
const stringify = require('../util/stringify');

// TODO break out docGenerator and tests
/**
 * Generate a predicate for a document query.
 *
 * @param {Object} condition - A condition object (generated by parseKey).
 * @param {String} key - The key corresponding to the condition in the criteria object.
 * @return {Object} A predicate object.
 */
const docGenerator = function (condition, key) {
  const isArray = _.isArray(condition.value);

  // Contains queries using the @> operator can take advantage of a GIN index
  // on JSONB fields. This gives document queries a dramatic performance boost.
  if (
    /*
     * type one: array of objects
     *
     * Here, the criteria {key: [{matchMe: true}, ...]} search for a
     * corresponding document {key: [..., {matchMe: true}, ...]}. At least one
     * object in the document array must match all conditions of the object(s)
     * in the criteria array. Multiple such objects are effectively merged.
     */
    (isArray && _.isPlainObject(condition.value[0])) ||
    /*
     * type two: shallow equality against an object
     *
     * Criteria in the format {matchMe: true} yield documents containing
     * {matchMe: true}.
     */
    (condition.appended.operator === '=' &&
      condition.jsonElements.length === 1 &&
      !isArray)
  ) {
    const param = _.set({}, key, condition.value);

    condition.lhs = condition.path;
    condition.appended.operator = '@>';
    condition.params.push(JSON.stringify(param));
    condition.value = `$${condition.offset}`;
  } else if (condition.appended.operator !== 'IS' && condition.appended.operator !== 'IS NOT') {
    /*
     * We're querying a key on the document body! `IS` operations need no
     * further treatment. Comparisons use an as-text operator, so we need to
     * convert the value coming out of the JSON/JSONB field to the correct type
     * first.
     */
    let cast = '';

    if (_.isBoolean(condition.value)) {
      cast = '::boolean';
    } else if (_.isNumber(condition.value)) {
      cast = '::decimal';
    } else if (_.isDate(condition.value)) {
      cast = '::timestamptz';
      condition.params.push(condition.value);
      condition.value = `$${condition.offset}`;
    } else if (condition.appended.mutator) {
      condition = condition.appended.mutator(condition);
    } else {
      condition.params.push(stringify(condition.value));
      condition.value = `$${condition.offset}`;
    }

    condition.lhs = `(${condition.lhs})${cast || ''}`;
  }

  return condition;
};

/**
 * Query conditions generator.
 *
 * @param {Entity} source - The Readable entity for which this query predicate
 * is being generated.
 * @param {Object} criteria - Query criteria mapping column names (optionally
 * including operation eg 'my_field <>') to the parameter values. Predicates
 * generated from a criteria object are joined together with `and`; an `or` key
 * denotes an array of nested criteria objects, the collected predicates from
 * each of which are parenthesized and joined with `or`.
 * @param {Number} [offset=0] - Added to the token index value in the prepared
 * statement (with offset 0, parameters will start $1, $2, $3).
 * @param {Boolean} [isDocument=false] - True to target fields in a document
 * body.
 *
 * @return {Object} An object representing the query conditions. The
 * `conditions` field contains the final SQL string, the `params` field the
 * parameters for the prepared statement, and the `predicates` field the raw
 * predicate mapping.
 */
exports = module.exports = function where (source, criteria, offset = 0, isDocument = false) {
  if (_.isPlainObject(criteria) && _.isEmpty(criteria)) {
    return {
      predicate: 'TRUE',
      params: []
    };
  }

  if (Object.prototype.hasOwnProperty.call(criteria, 'conditions') && Object.prototype.hasOwnProperty.call(criteria, 'params')) {
    if (_.isPlainObject(criteria.where) && !_.isEmpty(criteria.where)) {
      // searchDoc can pass an alternate inner isDocument in the criteria
      const isInnerDocument = Object.prototype.hasOwnProperty.call(criteria, 'isDocument') ? criteria.isDocument : isDocument;
      const subWhere = where(source, criteria.where, criteria.params.length, isInnerDocument);

      return {
        predicate: `${criteria.conditions} AND ${subWhere.predicate}`,
        params: criteria.params.concat(subWhere.params)
      };
    }

    return {
      predicate: criteria.conditions,
      params: criteria.params
    };
  }

  const symbol = isDocument ? source.forDoc : source.forWhere;

  return source.predicate(criteria, offset, symbol);
};

exports.docGenerator = docGenerator;
